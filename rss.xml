<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Tinkering with Code.]]></title><description><![CDATA[My blog. A dev log.]]></description><link>https://sajmoon.github.io</link><generator>RSS for Node</generator><lastBuildDate>Sun, 21 Jan 2018 21:45:24 GMT</lastBuildDate><item><title><![CDATA[Add methods to a Ruby class]]></title><description><![CDATA[We can always extend classes in Ruby. Both predefined and classes we create ourselfs. We say that classes are  always open . If you extend a…]]></description><link>https://sajmoon.github.io/ruby-add-methods-to-classes/</link><guid isPermaLink="false">https://sajmoon.github.io/ruby-add-methods-to-classes/</guid><pubDate>Tue, 16 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;We can always extend classes in Ruby. Both predefined and classes we create ourselfs. We say that classes are &lt;em&gt;always open&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you extend a built-in class be sure that it should be there. A string for example probably should not have methods to generate urls to a placeholder image, even if it could. It does not belong in the String class.&lt;/p&gt;
&lt;h2&gt;Add an instance method to a built-in class.&lt;/h2&gt;
&lt;p&gt;Add a method to Integers that returns a random value between 0 and the integer value.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;random &lt;span class=&quot;token comment&quot;&gt;# Undefined method &apos;random&apos; for 19:Integer&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NoMethodError&lt;/span&gt;
  puts &lt;span class=&quot;token string&quot;&gt;&quot;19.random is not defined&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

puts &lt;span class=&quot;token string&quot;&gt;&quot;extending Integer&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; random
    &lt;span class=&quot;token constant&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

puts &lt;span class=&quot;token string&quot;&gt;&quot;19.random =&gt; &lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token delimiter tag&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;random&lt;span class=&quot;token delimiter tag&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;code&gt;self&lt;/code&gt; refers to the instance of the object itself. In the case of our Integer self is 19.&lt;/p&gt;
&lt;h2&gt;Add a class method&lt;/h2&gt;
&lt;p&gt;To add a class method is also simple.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;token builtin&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;random &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NoMethodError&lt;/span&gt;
  puts &lt;span class=&quot;token string&quot;&gt;&quot;Integer.random is not defined&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;random number
    &lt;span class=&quot;token constant&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rand number
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

puts &lt;span class=&quot;token string&quot;&gt;&quot;Integer.random 3 =&gt; &lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token delimiter tag&quot;&gt;#{&lt;/span&gt;Integer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;random &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token delimiter tag&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;We add methods to self.&lt;/p&gt;
&lt;h2&gt;Extend active record&lt;/h2&gt;
&lt;p&gt;We use Kaminari to paginate our application. We need to render the meta data in the json response, and to do that we extend ActiveRecord to provide this functionalliy.&lt;/p&gt;
&lt;p&gt;Extend ActiveRecord::Relation with a &lt;code&gt;pagination_info&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;lib/active_record_relation_extension.rb&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ActiveRecordRelationExtension&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; pagination_info
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; respond_to&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token symbol&quot;&gt;:total_count&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        total_count&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; total_count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        current_page&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; current_page&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        next_page&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; next_page&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        prev_page&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; prev_page&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt; Then we also need to configure it. We push it to the inheritance stack of Relation.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;config/initializers/active_record_relation_pagination.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;token constant&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:Relation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:include&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ActiveRecordRelationExtension&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;</content:encoded></item><item><title><![CDATA[Add support for drafts in gatsby]]></title><description><![CDATA[Adding support for drafts in Gatsby. I started out with a blog starter for Gatsby. Pretty handy. Easy to get started. But it felt like magic…]]></description><link>https://sajmoon.github.io/gatsby-add-drafts/</link><guid isPermaLink="false">https://sajmoon.github.io/gatsby-add-drafts/</guid><pubDate>Sun, 14 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Adding support for drafts in Gatsby.&lt;/p&gt;
&lt;p&gt;I started out with a blog starter for Gatsby. Pretty handy. Easy to get started. But it felt like magic. Why and how do we generate blog posts with urls from markdown files?&lt;/p&gt;
&lt;p&gt;So I started to actually read the guide. So before you start to look for a quick fix, read the guide &lt;a href=&quot;https://www.gatsbyjs.org/docs/&quot;&gt;here&lt;/a&gt;. It acutally tells you how gatsby works. Hopefully you will be able to implment this yourself.&lt;/p&gt;
&lt;h2&gt;How can we add support for drafts?&lt;/h2&gt;
&lt;p&gt;To solve this problem for us we will just hide all blog posts that have been marked as drafts.&lt;/p&gt;
&lt;p&gt;Gatsby is built around the idea of plugins. We use the &lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-transformer-remark/&quot;&gt;transformer-remark&lt;/a&gt; plugin to convert markdown files to queriable data. The data is queried from a &lt;a href=&quot;http://graphql.org/learn/&quot;&gt;GraphQl instance&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Just remember that all this happens in build time, not run time.&lt;/p&gt;
&lt;h3&gt;Add meta data&lt;/h3&gt;
&lt;p&gt;We have a meta data block on top of each markdown file. We can add any data we need there. For example a draft: Bool. This block is called frontmatter for some reason.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-markdown&quot;&gt;&lt;code&gt;&lt;span class=&quot;token hr punctuation&quot;&gt;---&lt;/span&gt;
title: Title of page
date: &quot;2018-01-01&quot;
&lt;span class=&quot;token title important&quot;&gt;draft: false
&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;Filter our posts&lt;/h3&gt;
&lt;p&gt;In our &lt;code&gt;pages/index.js&lt;/code&gt; we list our posts and iterate over them to render links. We add a filter to hide our drafts.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; posts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;props.data.allMarkdownRemark.edges&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; node &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;frontmatter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;draft
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;That doesn’t work yet. The markdown parse knows we added a &lt;code&gt;draft&lt;/code&gt; value but we do not have it in the data node. We need to make sure we fetch it.&lt;/p&gt;
&lt;h3&gt;Query data&lt;/h3&gt;
&lt;p&gt;In the &lt;code&gt;pages/index.js&lt;/code&gt; file we have a pageQuery object. It is a GraphQL query, so we tell it we need the draft status.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;frontmatter &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;formatString&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;DD MMMM, YYYY&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  title
  draft
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;And we are done.&lt;/p&gt;
&lt;h2&gt;Show me a real implementation!&lt;/h2&gt;
&lt;p&gt;Sure. I added draft support to this blog in &lt;a href=&quot;https://github.com/sajmoon/sajmoon.github.io/commit/1340ce9e5fcda5b8b6a0ca1d791b488638df8b87&quot;&gt;this commit&lt;/a&gt;. Unfortunately it includes some other stuff too. But there you have all the changes needed.&lt;/p&gt;
&lt;h2&gt;Some improvements.&lt;/h2&gt;
&lt;p&gt;This is a pretty bad feature. It is hard to use this in development where you might actually have to read the post you are writing.&lt;/p&gt;
&lt;p&gt;So let’s hide the posts in production, but in development add a tag to them or something.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; isDevelopment &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NODE_ENV &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;development&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; posts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;props.data.allMarkdownRemark.edges&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; node &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; isDevelopment &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;frontmatter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;draft
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Now we do not filter posts in development. We can then show in the UI something to tell the user it is a draft.&lt;/p&gt;
&lt;p&gt;In our render method:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; isDraft &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;frontmatter.draft&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Link style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; boxShadow&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;none&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; to&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fields&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;slug&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; isDraft &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;[Draft] &apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Link&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;Change the format of the url&lt;/h2&gt;
&lt;p&gt;I wanted to add year to the url for the posts, both so they could persist over
years where I imagine I have many posts soon, and also to understand more about
Gatsby.&lt;/p&gt;
&lt;p&gt;The starting position is that we generate posts from markdown, which have a
title and a date in the &lt;code&gt;frontmatter&lt;/code&gt;. The path is generated from the title, and
becomes a slug.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;allMarkdownRemark&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;edges&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; edge &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;createPage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    path&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; edge&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fields&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;slug&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    component&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; blogPost&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    context&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      slug&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; edge&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fields&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;slug&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;We link to these pages via the slug:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Link to&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fields&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;To create pages on a different path we just change the about createPage call to
specify a year too.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;  path&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; edge&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;frontmatter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; edge&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fields&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;slug&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;However, everywhere we link to that post we need to include the date, formatted
and ready.&lt;/p&gt;
&lt;h3&gt;Where does slug come from?&lt;/h3&gt;
&lt;p&gt;So here is the question that actually helped me understand Gatsby a bit
better. We don’t have slug in frontmatter, nor do we calculate it every time we
use it. It is sorted in GraphQL and we get it with a query. It is not in
frontmatter but on fields.&lt;/p&gt;
&lt;p&gt;So when and where do we generate that, and how is it done?&lt;/p&gt;
&lt;p&gt;Enter Gatsby lifecycle.&lt;/p&gt;
&lt;p&gt;The documentation is pretty good at listing what you can do with lifecycles, you
can read it &lt;a href=&quot;https://www.gatsbyjs.org/docs/node-apis/&quot;&gt;here&lt;/a&gt;, but I found it a
bit confusing. Maybe because I used a starter boilerplate for Gatsby instead of
starting from scratch.&lt;/p&gt;
&lt;p&gt;We read our posts with &lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-source-filesystem/&quot;&gt;&lt;code&gt;gatsby-source-filesystem&lt;/code&gt;&lt;/a&gt;, all markdown files are parsed
with &lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-transformer-remark/&quot;&gt;&lt;code&gt;gatsby-transformer-remark&lt;/code&gt;&lt;/a&gt; which is the files we eventually see live.&lt;/p&gt;
&lt;p&gt;The first plugin is a source plugin. It generates File nodes. Remark reads nodes, and
parses what it needs, in this case markdown. It creates ‘MarkdownRemark’ Nodes.&lt;/p&gt;
&lt;h3&gt;Gatsby onCreateNode&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;onCreateNode&lt;/code&gt; is called when a node is created, and in this hook I already had
code to generate the slug.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createFilePath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; getNode &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;createNodeField&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`slug`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;We mutate the node, and add the property &lt;code&gt;slug&lt;/code&gt; which we need. We can customize
this to add a &lt;code&gt;path&lt;/code&gt; field variable that includes year and the slug.&lt;/p&gt;
&lt;p&gt;To create links to these pages we simply do &lt;code&gt;&amp;#x3C;Link to={ node.fields.path }&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, we add &lt;code&gt;path&lt;/code&gt; to the MarkdownNode:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; date &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;frontmatter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; year &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullYear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; year &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; value

  &lt;span class=&quot;token function&quot;&gt;createNodeField&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`path`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;And we create pages with that path instead of the slug:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code&gt;_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;allMarkdownRemark&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;edges&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; edge &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; edge&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fields&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;path
  &lt;span class=&quot;token function&quot;&gt;createPage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    path&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    component&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; blogPost&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    context&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      slug&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; edge&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fields&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;slug&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Now we can mark a page as draft. Have it visible during development, and hidden on the final site.&lt;/p&gt;
&lt;p&gt;We learned how Gatsby uses plugins to parse data, realized that we should look at the documentation, and also how gatsby uses GraphQL.&lt;/p&gt;
&lt;p&gt;We now know about Nodes in Gatsby.&lt;/p&gt;
&lt;p&gt;We looked at one hook Gatsby provides into the internal workings, and used it to
attach more date to nodes.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Resources for starting with iOS and Swift]]></title><description><![CDATA[I got a new job and here our main platform is iOS. Im a web developer so this should be interesting. Will try to document what and how I…]]></description><link>https://sajmoon.github.io/starting-resources-for-ios-and-swift/</link><guid isPermaLink="false">https://sajmoon.github.io/starting-resources-for-ios-and-swift/</guid><pubDate>Sun, 07 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I got a new job and here our main platform is iOS. Im a web developer so this should be interesting.&lt;/p&gt;
&lt;p&gt;Will try to document what and how I learn both Swift as a language and the SDKs and inner workings of iOS.&lt;/p&gt;
&lt;h2&gt;Where to start&lt;/h2&gt;
&lt;h3&gt;Read the docs&lt;/h3&gt;
&lt;p&gt;Apples &lt;em&gt;The Swift Programming Langugae&lt;/em&gt; is a great book. It talks about all the language features without the SDK for iOS. &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309&quot;&gt;Read it&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build a table view - &lt;a href=&quot;https://developer.apple.com/library/content/referencelibrary/GettingStarted/DevelopiOSAppsSwift/CreateATableView.html&quot;&gt;Apple documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Stanford course&lt;/h3&gt;
&lt;p&gt;Standford has a open course for app development with swift &lt;a href=&quot;https://itunes.apple.com/us/course/developing-ios-11-apps-with-swift/id1309275316&quot;&gt;here&lt;/a&gt;. Only avaialbe for apple devices.&lt;/p&gt;
&lt;p&gt;I found some episodes on youtube:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=pnUFW6NxlSE&quot;&gt;Episode 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=qiROf0aHI4k&quot;&gt;Episode 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bZldHF69C_s&quot;&gt;Episode 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bHv6QVHId6Q&quot;&gt;Episode 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=5n7cqFdJd1U&quot;&gt;Episode 5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Other resiources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.appcoda.com/learnswift/&quot;&gt;https://www.appcoda.com/learnswift/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.raywenderlich.com/160521/storyboards-tutorial-ios-11-part-1&quot;&gt;https://www.raywenderlich.com/160521/storyboards-tutorial-ios-11-part-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Build a logger (simple use of extensions and more) &lt;a href=&quot;https://medium.com/@sauvik_dolui/developing-a-tiny-logger-in-swift-7221751628e6&quot;&gt;https://medium.com/@sauvik_dolui/developing-a-tiny-logger-in-swift-7221751628e6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Declare new infix operators &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AdvancedOperators.html&quot;&gt;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift&lt;em&gt;Programming&lt;/em&gt;Language/AdvancedOperators.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Write code&lt;/h2&gt;
&lt;h3&gt;Playground&lt;/h3&gt;
&lt;p&gt;It’s important to write code to learn. So start building something. However, sometimes it can help to try out new language features. Xcode has a playground feature. Start a new empty playground and you can follow along in &lt;em&gt;The Swift Programming Lanugauge&lt;/em&gt; book and try it out.&lt;/p&gt;
&lt;p&gt;You can do pretty advanced stuff in the playground, showing the code and the final product at the same time. Perfect for learning things.&lt;/p&gt;
&lt;p&gt;Read more about the playground and find examples &lt;a href=&quot;https://developer.apple.com/swift/playgrounds/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Excersism&lt;/h3&gt;
&lt;p&gt;Excersism is a great way to learn new things. You have a very small and well defined problem to solve. They provide test cases and your job is to make them pass.&lt;/p&gt;
&lt;p&gt;Then you can get feedback on your solution from the community or read someone elses code. Then iterate and improve your solution. It’s quite awesome. Have a look &lt;a href=&quot;http://exercism.io/languages/swift/about&quot;&gt;http://exercism.io&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Installed Gatsby]]></title><description><![CDATA[Started a gatsby blog. Will migrate old blog posts here later.]]></description><link>https://sajmoon.github.io/hello-world/</link><guid isPermaLink="false">https://sajmoon.github.io/hello-world/</guid><pubDate>Sat, 06 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Started a gatsby blog. Will migrate old blog posts here later.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Summary of Swift language features]]></title><description><![CDATA[Summary of Swift language features Swith value bining In a switch statement you can sort of pattern match on tuples. The complete example…]]></description><link>https://sajmoon.github.io/swift-language-feature-summary/</link><guid isPermaLink="false">https://sajmoon.github.io/swift-language-feature-summary/</guid><pubDate>Sat, 07 Jan 2017 20:52:03 GMT</pubDate><content:encoded>&lt;h1&gt;Summary of Swift language features&lt;/h1&gt;
&lt;h3&gt;Swith value bining&lt;/h3&gt;
&lt;p&gt;In a switch statement you can sort of pattern match on tuples.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;let anotherPoint = (2, 0)
switch anotherPoint {
case (let x, 0):
    print(&quot;on the x-axis with an x value of \(x)&quot;)
case (0, let y):
    print(&quot;on the y-axis with a y value of \(y)&quot;)
case let (x, y):
    print(&quot;somewhere else at (\(x), \(y))&quot;)
}
// Prints &quot;on the x-axis with an x value of 2&quot;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The complete example can be read [here.]&lt;a href=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/ControlFlow.html#//apple_ref/doc/uid/TP40014097-CH9-ID120&quot;&gt;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift&lt;em&gt;Programming&lt;/em&gt;Language/ControlFlow.html#//apple_ref/doc/uid/TP40014097-CH9-ID120&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;var title: String!&lt;/h3&gt;
&lt;h3&gt;Guard&lt;/h3&gt;
&lt;p&gt;Assignments are kept in scope&lt;/p&gt;
&lt;h3&gt;Named function arguments&lt;/h3&gt;
&lt;p&gt;Not strange in general but we are allowed to have two names for a paramter, an internal and an external.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-none&quot;&gt;&lt;code&gt;func methodName(external internal : String) {
 use internal
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;called as &lt;code&gt;methodName(external: &quot;value&quot;)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Xcode was slow&lt;/h2&gt;
&lt;p&gt;I had enabled slow animations. Check the debug menu.&lt;/p&gt;
&lt;h2&gt;Extra stuff&lt;/h2&gt;
&lt;p&gt;class func vs static func&lt;/p&gt;</content:encoded></item></channel></rss>