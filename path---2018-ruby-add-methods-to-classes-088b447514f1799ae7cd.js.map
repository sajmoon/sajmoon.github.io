{"version":3,"sources":["webpack:///path---2018-ruby-add-methods-to-classes-088b447514f1799ae7cd.js","webpack:///./.cache/json/2018-ruby-add-methods-to-classes.json"],"names":["webpackJsonp","540","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,uBAAAC,OAAA,gBAAuDC,gBAAmBC,GAAA,wHAAAC,KAAA,y/TAAm/SC,aAAy/BL,MAAA,8BAAAM,KAAA,sBAAkEC,aAAgBC,KAAA","file":"path---2018-ruby-add-methods-to-classes-088b447514f1799ae7cd.js","sourcesContent":["webpackJsonp([212758512388338],{\n\n/***/ 540:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Tinkering with Code.\",\"author\":\"Simon Ström\"}},\"markdownRemark\":{\"id\":\"/Users/simon/Code/sajmoon.github.io/src/pages/ruby-add-methods-to-classes/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>We can always extend classes in Ruby. Both predefined and classes we create ourself. We say that classes are <em>always open</em>.</p>\\n<p>If you want to some concrete examples look at this <a href=\\\"https://gist.github.com/sajmoon/f8b766a7a7da36f7e9a9899e1b8de9b9\\\">gist with some code.</a></p>\\n<p>Before you extend a built-in class be sure that it should be there. A string should not have methods to generate urls to a placeholder image, even if it could. It does not belong in the String class.</p>\\n<h2>Maybe don’t?</h2>\\n<p>Most of the time you should not add methods to classes. The placeholder image url example above should not be on the String class. It might fit on some other class, maybe your <code>ImageUrl</code> class, or not at all.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">def</span> placeholder_image_url\\n  <span class=\\\"token string\\\">\\\"http://via.placeholder.com/100x100\\\"</span>\\n<span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<p>Or in Module if you want it name spaced.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">module</span> <span class=\\\"token constant\\\">Placeholders</span>\\n  <span class=\\\"token keyword\\\">def</span> <span class=\\\"token constant\\\">Placeholders</span><span class=\\\"token punctuation\\\">.</span>image_url size <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"200\\\"</span>\\n    <span class=\\\"token string\\\">\\\"http://via.placeholder.com/<span class=\\\"token interpolation\\\"><span class=\\\"token delimiter tag\\\">#{</span>size<span class=\\\"token delimiter tag\\\">}</span></span>x<span class=\\\"token interpolation\\\"><span class=\\\"token delimiter tag\\\">#{</span>size<span class=\\\"token delimiter tag\\\">}</span></span>\\\"</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<h2>Create a subclass</h2>\\n<p>An option could be to create a subclass of a known class. For example we could create a class that can count vowels.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">VowelString</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token builtin\\\">String</span>\\n  <span class=\\\"token keyword\\\">def</span> vowels\\n    chars<span class=\\\"token punctuation\\\">.</span>select<span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">|</span>char<span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"aoueiy\\\"</span><span class=\\\"token punctuation\\\">.</span>include<span class=\\\"token operator\\\">?</span> char <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">.</span>count\\n  <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<p>This is just classic inheritance.</p>\\n<p>We can use it like any other class.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>sample_vowel_string = VowelString.new \\\"My super cool string\\\"\\nputs \\\"My sample string has #{sample_vowel_string.vowels} vowels\\\"</code></pre>\\n      </div>\\n<p>In Ruby we have single inheritance, so we can not subclass from both <code>String</code> and <code>Integer</code>.</p>\\n<h2>Add an instance method to a built-in class.</h2>\\n<p>Add a method to Integers that returns a random value between 0 and the integer value.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">begin</span>\\n  <span class=\\\"token number\\\">19</span><span class=\\\"token punctuation\\\">.</span>random <span class=\\\"token comment\\\"># Undefined method 'random' for 19:Integer</span>\\n<span class=\\\"token keyword\\\">rescue</span> <span class=\\\"token constant\\\">NoMethodError</span>\\n  puts <span class=\\\"token string\\\">\\\"19.random is not defined\\\"</span>\\n<span class=\\\"token keyword\\\">end</span>\\n\\nputs <span class=\\\"token string\\\">\\\"extending Integer\\\"</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Integer</span>\\n  <span class=\\\"token keyword\\\">def</span> random\\n    <span class=\\\"token constant\\\">Random</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">rand</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">self</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span>\\n\\nputs <span class=\\\"token string\\\">\\\"19.random => <span class=\\\"token interpolation\\\"><span class=\\\"token delimiter tag\\\">#{</span><span class=\\\"token number\\\">19</span><span class=\\\"token punctuation\\\">.</span>random<span class=\\\"token delimiter tag\\\">}</span></span>\\\"</span>\\n</code></pre>\\n      </div>\\n<p><code>self</code> refers to the instance of the object itself. In the case of our Integer self is 19.</p>\\n<h2>Add a class method</h2>\\n<p>To add a class method is also simple.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">begin</span>\\n  <span class=\\\"token builtin\\\">Integer</span><span class=\\\"token punctuation\\\">.</span>random <span class=\\\"token number\\\">3</span>\\n<span class=\\\"token keyword\\\">rescue</span> <span class=\\\"token constant\\\">NoMethodError</span>\\n  puts <span class=\\\"token string\\\">\\\"Integer.random is not defined\\\"</span>\\n<span class=\\\"token keyword\\\">end</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Integer</span>\\n  <span class=\\\"token keyword\\\">def</span> <span class=\\\"token keyword\\\">self</span><span class=\\\"token punctuation\\\">.</span>random number\\n    <span class=\\\"token constant\\\">Random</span><span class=\\\"token punctuation\\\">.</span>rand number\\n  <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span>\\n\\nputs <span class=\\\"token string\\\">\\\"Integer.random 3 => <span class=\\\"token interpolation\\\"><span class=\\\"token delimiter tag\\\">#{</span>Integer<span class=\\\"token punctuation\\\">.</span>random <span class=\\\"token number\\\">3</span><span class=\\\"token delimiter tag\\\">}</span></span>\\\"</span>\\n</code></pre>\\n      </div>\\n<p>We add methods to self.</p>\\n<h2>Mixins</h2>\\n<p>We can add behaviour to classes with mixins. We <code>include</code> a module in the class.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">module</span> <span class=\\\"token constant\\\">Vowels</span>\\n  <span class=\\\"token constant\\\">ALL</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"aoueiy\\\"</span>\\n\\n  <span class=\\\"token keyword\\\">def</span> vowels\\n    <span class=\\\"token keyword\\\">self</span><span class=\\\"token punctuation\\\">.</span>chars<span class=\\\"token punctuation\\\">.</span>select<span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">|</span>char<span class=\\\"token operator\\\">|</span> <span class=\\\"token constant\\\">ALL</span><span class=\\\"token punctuation\\\">.</span>include<span class=\\\"token operator\\\">?</span> char <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n\\n  <span class=\\\"token keyword\\\">def</span> count_vowels\\n    vowels<span class=\\\"token punctuation\\\">.</span>count\\n  <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<p>Now we can access constants just like normal modules <code>puts \\\"All vowels: #{Vowels::ALL}\\\"</code>.</p>\\n<p>We can then make String vowel aware.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">String</span>\\n  include <span class=\\\"token constant\\\">Vowels</span>\\n<span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<p>and use it like any method on <code>String</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>\\\"Mu super cool string\\\".count_vowels # 6</code></pre>\\n      </div>\\n<p>We can include many modules in our class, and thus achieving a sort of multi inheritance.</p>\\n<h2>Extend active record</h2>\\n<p>We use Kaminari to paginate our application. We need to render the meta data in the json response, and to do that we extend ActiveRecord to provide this functionalliy.</p>\\n<p>Extend ActiveRecord::Relation with a <code>pagination_info</code> method.</p>\\n<p>In <code>lib/active_record_relation_extension.rb</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">module</span> <span class=\\\"token constant\\\">ActiveRecordRelationExtension</span>\\n  <span class=\\\"token keyword\\\">def</span> pagination_info\\n    <span class=\\\"token keyword\\\">if</span> respond_to<span class=\\\"token operator\\\">?</span> <span class=\\\"token symbol\\\">:total_count</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        total_count<span class=\\\"token punctuation\\\">:</span> total_count<span class=\\\"token punctuation\\\">,</span>\\n        current_page<span class=\\\"token punctuation\\\">:</span> current_page<span class=\\\"token punctuation\\\">,</span>\\n        next_page<span class=\\\"token punctuation\\\">:</span> next_page<span class=\\\"token punctuation\\\">,</span>\\n        prev_page<span class=\\\"token punctuation\\\">:</span> prev_page<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">else</span>\\n      <span class=\\\"token keyword\\\">nil</span>\\n    <span class=\\\"token keyword\\\">end</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n <span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<p> Then we also need to configure it. We push it to the inheritance stack of Relation.</p>\\n<p><code>config/initializers/active_record_relation_pagination.rb</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token constant\\\">ActiveRecord</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token symbol\\\">:Relation</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token symbol\\\">:include</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">ActiveRecordRelationExtension</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"Add methods to a Ruby class\",\"date\":\"January 16, 2018\"}}},\"pathContext\":{\"slug\":\"/ruby-add-methods-to-classes/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2018-ruby-add-methods-to-classes-088b447514f1799ae7cd.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Tinkering with Code.\",\"author\":\"Simon Ström\"}},\"markdownRemark\":{\"id\":\"/Users/simon/Code/sajmoon.github.io/src/pages/ruby-add-methods-to-classes/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>We can always extend classes in Ruby. Both predefined and classes we create ourself. We say that classes are <em>always open</em>.</p>\\n<p>If you want to some concrete examples look at this <a href=\\\"https://gist.github.com/sajmoon/f8b766a7a7da36f7e9a9899e1b8de9b9\\\">gist with some code.</a></p>\\n<p>Before you extend a built-in class be sure that it should be there. A string should not have methods to generate urls to a placeholder image, even if it could. It does not belong in the String class.</p>\\n<h2>Maybe don’t?</h2>\\n<p>Most of the time you should not add methods to classes. The placeholder image url example above should not be on the String class. It might fit on some other class, maybe your <code>ImageUrl</code> class, or not at all.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">def</span> placeholder_image_url\\n  <span class=\\\"token string\\\">\\\"http://via.placeholder.com/100x100\\\"</span>\\n<span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<p>Or in Module if you want it name spaced.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">module</span> <span class=\\\"token constant\\\">Placeholders</span>\\n  <span class=\\\"token keyword\\\">def</span> <span class=\\\"token constant\\\">Placeholders</span><span class=\\\"token punctuation\\\">.</span>image_url size <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"200\\\"</span>\\n    <span class=\\\"token string\\\">\\\"http://via.placeholder.com/<span class=\\\"token interpolation\\\"><span class=\\\"token delimiter tag\\\">#{</span>size<span class=\\\"token delimiter tag\\\">}</span></span>x<span class=\\\"token interpolation\\\"><span class=\\\"token delimiter tag\\\">#{</span>size<span class=\\\"token delimiter tag\\\">}</span></span>\\\"</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<h2>Create a subclass</h2>\\n<p>An option could be to create a subclass of a known class. For example we could create a class that can count vowels.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">VowelString</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token builtin\\\">String</span>\\n  <span class=\\\"token keyword\\\">def</span> vowels\\n    chars<span class=\\\"token punctuation\\\">.</span>select<span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">|</span>char<span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">\\\"aoueiy\\\"</span><span class=\\\"token punctuation\\\">.</span>include<span class=\\\"token operator\\\">?</span> char <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">.</span>count\\n  <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<p>This is just classic inheritance.</p>\\n<p>We can use it like any other class.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>sample_vowel_string = VowelString.new \\\"My super cool string\\\"\\nputs \\\"My sample string has #{sample_vowel_string.vowels} vowels\\\"</code></pre>\\n      </div>\\n<p>In Ruby we have single inheritance, so we can not subclass from both <code>String</code> and <code>Integer</code>.</p>\\n<h2>Add an instance method to a built-in class.</h2>\\n<p>Add a method to Integers that returns a random value between 0 and the integer value.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">begin</span>\\n  <span class=\\\"token number\\\">19</span><span class=\\\"token punctuation\\\">.</span>random <span class=\\\"token comment\\\"># Undefined method 'random' for 19:Integer</span>\\n<span class=\\\"token keyword\\\">rescue</span> <span class=\\\"token constant\\\">NoMethodError</span>\\n  puts <span class=\\\"token string\\\">\\\"19.random is not defined\\\"</span>\\n<span class=\\\"token keyword\\\">end</span>\\n\\nputs <span class=\\\"token string\\\">\\\"extending Integer\\\"</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Integer</span>\\n  <span class=\\\"token keyword\\\">def</span> random\\n    <span class=\\\"token constant\\\">Random</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">rand</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">self</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span>\\n\\nputs <span class=\\\"token string\\\">\\\"19.random => <span class=\\\"token interpolation\\\"><span class=\\\"token delimiter tag\\\">#{</span><span class=\\\"token number\\\">19</span><span class=\\\"token punctuation\\\">.</span>random<span class=\\\"token delimiter tag\\\">}</span></span>\\\"</span>\\n</code></pre>\\n      </div>\\n<p><code>self</code> refers to the instance of the object itself. In the case of our Integer self is 19.</p>\\n<h2>Add a class method</h2>\\n<p>To add a class method is also simple.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">begin</span>\\n  <span class=\\\"token builtin\\\">Integer</span><span class=\\\"token punctuation\\\">.</span>random <span class=\\\"token number\\\">3</span>\\n<span class=\\\"token keyword\\\">rescue</span> <span class=\\\"token constant\\\">NoMethodError</span>\\n  puts <span class=\\\"token string\\\">\\\"Integer.random is not defined\\\"</span>\\n<span class=\\\"token keyword\\\">end</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Integer</span>\\n  <span class=\\\"token keyword\\\">def</span> <span class=\\\"token keyword\\\">self</span><span class=\\\"token punctuation\\\">.</span>random number\\n    <span class=\\\"token constant\\\">Random</span><span class=\\\"token punctuation\\\">.</span>rand number\\n  <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span>\\n\\nputs <span class=\\\"token string\\\">\\\"Integer.random 3 => <span class=\\\"token interpolation\\\"><span class=\\\"token delimiter tag\\\">#{</span>Integer<span class=\\\"token punctuation\\\">.</span>random <span class=\\\"token number\\\">3</span><span class=\\\"token delimiter tag\\\">}</span></span>\\\"</span>\\n</code></pre>\\n      </div>\\n<p>We add methods to self.</p>\\n<h2>Mixins</h2>\\n<p>We can add behaviour to classes with mixins. We <code>include</code> a module in the class.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">module</span> <span class=\\\"token constant\\\">Vowels</span>\\n  <span class=\\\"token constant\\\">ALL</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"aoueiy\\\"</span>\\n\\n  <span class=\\\"token keyword\\\">def</span> vowels\\n    <span class=\\\"token keyword\\\">self</span><span class=\\\"token punctuation\\\">.</span>chars<span class=\\\"token punctuation\\\">.</span>select<span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">|</span>char<span class=\\\"token operator\\\">|</span> <span class=\\\"token constant\\\">ALL</span><span class=\\\"token punctuation\\\">.</span>include<span class=\\\"token operator\\\">?</span> char <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n\\n  <span class=\\\"token keyword\\\">def</span> count_vowels\\n    vowels<span class=\\\"token punctuation\\\">.</span>count\\n  <span class=\\\"token keyword\\\">end</span>\\n<span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<p>Now we can access constants just like normal modules <code>puts \\\"All vowels: #{Vowels::ALL}\\\"</code>.</p>\\n<p>We can then make String vowel aware.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">String</span>\\n  include <span class=\\\"token constant\\\">Vowels</span>\\n<span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<p>and use it like any method on <code>String</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>\\\"Mu super cool string\\\".count_vowels # 6</code></pre>\\n      </div>\\n<p>We can include many modules in our class, and thus achieving a sort of multi inheritance.</p>\\n<h2>Extend active record</h2>\\n<p>We use Kaminari to paginate our application. We need to render the meta data in the json response, and to do that we extend ActiveRecord to provide this functionalliy.</p>\\n<p>Extend ActiveRecord::Relation with a <code>pagination_info</code> method.</p>\\n<p>In <code>lib/active_record_relation_extension.rb</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">module</span> <span class=\\\"token constant\\\">ActiveRecordRelationExtension</span>\\n  <span class=\\\"token keyword\\\">def</span> pagination_info\\n    <span class=\\\"token keyword\\\">if</span> respond_to<span class=\\\"token operator\\\">?</span> <span class=\\\"token symbol\\\">:total_count</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        total_count<span class=\\\"token punctuation\\\">:</span> total_count<span class=\\\"token punctuation\\\">,</span>\\n        current_page<span class=\\\"token punctuation\\\">:</span> current_page<span class=\\\"token punctuation\\\">,</span>\\n        next_page<span class=\\\"token punctuation\\\">:</span> next_page<span class=\\\"token punctuation\\\">,</span>\\n        prev_page<span class=\\\"token punctuation\\\">:</span> prev_page<span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">else</span>\\n      <span class=\\\"token keyword\\\">nil</span>\\n    <span class=\\\"token keyword\\\">end</span>\\n  <span class=\\\"token keyword\\\">end</span>\\n <span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<p> Then we also need to configure it. We push it to the inheritance stack of Relation.</p>\\n<p><code>config/initializers/active_record_relation_pagination.rb</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token constant\\\">ActiveRecord</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token symbol\\\">:Relation</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token symbol\\\">:include</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">ActiveRecordRelationExtension</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"Add methods to a Ruby class\",\"date\":\"January 16, 2018\"}}},\"pathContext\":{\"slug\":\"/ruby-add-methods-to-classes/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2018-ruby-add-methods-to-classes.json\n// module id = 540\n// module chunks = 212758512388338"],"sourceRoot":""}